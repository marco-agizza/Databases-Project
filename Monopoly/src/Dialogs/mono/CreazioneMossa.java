/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Dialogs.mono;

import static Dialogs.mono.CreazionePartita.newPane;
import Panels.mono.InfoCarte;
import java.awt.Window;
import java.sql.*;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author marco
 */
public class CreazioneMossa extends javax.swing.JDialog {
    int IDPartita;
    Connection myconObj=null;
    /**
     * Creates new form CreazioneMossa
     */
    public CreazioneMossa(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public static JPanel newPane(String labelText) {
        InfoCarte pane= new InfoCarte();
        return pane;
    }
    public void setIDPartita(int m){
        IDPartita=m;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        PedinaField = new javax.swing.JTextField();
        dad1 = new javax.swing.JComboBox<>();
        dad2 = new javax.swing.JComboBox<>();
        SpostamentoButton = new javax.swing.JRadioButton();
        AcquistoButton = new javax.swing.JRadioButton();
        SpecialeButton = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        monitoLabel = new javax.swing.JLabel();
        NumeroCartaBox = new javax.swing.JComboBox<>();
        ADDbutton = new javax.swing.JButton();
        ANNULbutton = new javax.swing.JButton();
        infoNumeriCarte = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Creazione mossa");

        jLabel1.setText("Pedina:");

        jLabel2.setText("Dado1:");

        jLabel3.setText("Dado2:");

        dad1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));
        dad1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dad1ActionPerformed(evt);
            }
        });

        dad2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));

        buttonGroup1.add(SpostamentoButton);
        SpostamentoButton.setText("Spostamento");
        SpostamentoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monitoTraspa(evt);
            }
        });

        buttonGroup1.add(AcquistoButton);
        AcquistoButton.setText("Acquisto");
        AcquistoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monitotrasp(evt);
            }
        });

        buttonGroup1.add(SpecialeButton);
        SpecialeButton.setText("Speciale");
        SpecialeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monitoDo(evt);
            }
        });

        jLabel4.setText("Numero carta:");

        monitoLabel.setForeground(new java.awt.Color(255, 0, 0));

        NumeroCartaBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16" }));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, SpecialeButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), NumeroCartaBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        ADDbutton.setText("Aggiungi");
        ADDbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDbuttonActionPerformed(evt);
            }
        });

        ANNULbutton.setText("Annulla");
        ANNULbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ANNULbuttonActionPerformed(evt);
            }
        });

        infoNumeriCarte.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        infoNumeriCarte.setText("?");
        infoNumeriCarte.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        infoNumeriCarte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoNumeriCarteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(monitoLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ANNULbutton)
                                .addGap(34, 34, 34)
                                .addComponent(ADDbutton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(PedinaField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dad1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(94, 94, 94)
                                .addComponent(SpostamentoButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AcquistoButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SpecialeButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dad2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(145, 145, 145)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NumeroCartaBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(infoNumeriCarte, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 55, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PedinaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dad1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SpostamentoButton)
                    .addComponent(AcquistoButton)
                    .addComponent(SpecialeButton))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(dad2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(NumeroCartaBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(infoNumeriCarte))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(monitoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ANNULbutton)
                    .addComponent(ADDbutton))
                .addGap(38, 38, 38))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dad1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dad1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dad1ActionPerformed

    
    private void monitoDo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monitoDo
        
        monitoLabel.setText("Indicare il numero della carta pescata... se pescata");
    }//GEN-LAST:event_monitoDo

    private void monitoTraspa(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monitoTraspa
        monitoLabel.setText("");

    }//GEN-LAST:event_monitoTraspa

    private void monitotrasp(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monitotrasp
        monitoLabel.setText("");
    }//GEN-LAST:event_monitotrasp

    private void infoNumeriCarteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoNumeriCarteActionPerformed
        Window parentWindow = SwingUtilities.windowForComponent(infoNumeriCarte);
        JDialog dialog = new JDialog(parentWindow);
        //dialog.setLocationRelativeTo(RegisterButton);
        dialog.setModal(true);
        dialog.add(newPane("Label in dialog"));
        
        dialog.pack();
        dialog.setVisible(true);
        
    }//GEN-LAST:event_infoNumeriCarteActionPerformed

    private void ANNULbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ANNULbuttonActionPerformed
        this.dispose();
    }//GEN-LAST:event_ANNULbuttonActionPerformed
    
    //metodo per l' aggiunta di una mossa 
    private void ADDbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDbuttonActionPerformed
        String TipoMossa,NomeContratto = null,NomeSpeciale=null,Pedina,DescrizioneCarta;
        int DaPosizione,APosizione,Dado1=Integer.parseInt(dad1.getSelectedItem().toString()),Dado2=Integer.parseInt(dad2.getSelectedItem().toString()), Turno=0,IDpartita1=this.IDPartita,IDpartita=this.IDPartita,IDpartitaPed=this.IDPartita,Sezione=0;
        int n_partecipanti=0,Turnonuovamossa=0;
        int num_nellordine=0,ordinerisp=0;
        int Sezioneultimossa=0,Sezioneultimossas=0,Turnoultimossa=0,Turnoultimossas=0;
        String Pedinaultimossa=null,Pedinaultimossas=null;
        String [] array=new String[6];
        int NumeroCarta=0;
        int X=0;
        System.out.println("IDPartita in CREAZIONE MOSSA è "+ IDPartita);
        if(!PedinaField.getText().trim().isEmpty()){
            Pedina=PedinaField.getText();
            System.out.println(Pedina);
            try{
                myconObj=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "Utente","12345");
                //trovo numero di partecipanti della partita
                Statement num=myconObj.createStatement();
                ResultSet partecipanti= num.executeQuery("SELECT NumeroGiocatori FROM Partita WHERE IDPartita="+IDPartita);
                partecipanti.next();
                n_partecipanti=partecipanti.getInt("NumeroGiocatori");
                num.close();
                //popolo un array per determinare un ordine nelle mosse 
                Statement ord=myconObj.createStatement();
                ResultSet pedineus=ord.executeQuery("SELECT Pedina FROM Mossa WHERE IDPartita1="+IDPartita+"and Sezione=0 and Turno=0");
                if(pedineus.next()){
                    for (int i=0;i<n_partecipanti;i++){
                        array[i]=pedineus.getString("Pedina");
                        pedineus.next();
                    }
                }
                pedineus.close();
                for(int i=0;i<n_partecipanti;i++){
                    if(Pedina.equals(array[i])){
                        num_nellordine=i;
                    }
                }
                //mi serve il turno della mossa che sto inserendo 
                //ultimossa pedina nostra
                Statement ulti= myconObj.createStatement();
                ResultSet ultimossas= ulti.executeQuery("Select * From Mossa Where IDPartita1="+IDPartita+"and Pedina='"+Pedina+"'");
                System.out.println("abcd");
                System.out.println("tuttok quui");
                while(ultimossas.next()){
                    Sezioneultimossas=ultimossas.getInt("Sezione");
                    Pedinaultimossas=ultimossas.getString("Pedina");
                    Turnoultimossas= ultimossas.getInt("Turno");
                }
                ulti.close();
                //ultimossa generale
                Statement ult= myconObj.createStatement();
                ResultSet ultimossa= ult.executeQuery("Select * From Mossa Where IDPartita1="+IDPartita);
                System.out.println("abcd");
                while(ultimossa.next()){
                    Sezioneultimossa=ultimossa.getInt("Sezione");
                    Pedinaultimossa=ultimossa.getString("Pedina");
                    Turnoultimossa= ultimossa.getInt("Turno");
                }
                System.out.println("Tutto app");
                ult.close();
                if(Pedinaultimossa.equals(Pedina)){
                    Turnonuovamossa=Turnoultimossa;
                }else{
                    Turnonuovamossa=Turnoultimossas+1;
                }
                if(num_nellordine==0){
                    //Non eseguo controlli
                    
                }else{
                    if(num_nellordine==1){
                        //controllo che per le pedine di ordine maggiore di num_nellordine hanno giocato le mosse del turno precedente
                        for(int i=num_nellordine;i<n_partecipanti;i++){
                            Statement ultim= myconObj.createStatement();
                            ResultSet ultimossas1= ultim.executeQuery("Select turno From Mossa Where IDPartita1="+IDPartita+"and Pedina='"+array[i]+"' and Turno="+(Turnonuovamossa-1)+"and sezione=0");
                            if(!ultimossas1.next()){
                                ordinerisp=ordinerisp+1;
                                JOptionPane.showMessageDialog(this,"Ordine non rispettato, tocca a qualcun altro");
                                X=1;
                            }
                            ultim.close();
                        }
                        //controllo che per le pedine di ordine inferiore hanno giocato il turno della mossa attuale 
                        if(X==0){
                            for(int i=0;i<num_nellordine;i++){
                                Statement ultim= myconObj.createStatement();
                                ResultSet ultimossas1= ultim.executeQuery("Select turno From Mossa Where IDPartita1="+IDPartita+"and Pedina='"+array[i]+"' and Turno="+Turnonuovamossa+"and sezione=0");
                                if(!ultimossas1.next()){
                                    ordinerisp=ordinerisp+1;
                                    JOptionPane.showMessageDialog(this,"Ordine non rispettato, tocca a qualcun altro");
                                }
                                ultim.close();
                            }    
                        }
                    }else{
                        if(num_nellordine==2){
                            //controllo che per le pedine di ordine maggiore di num_nellordine hanno giocato le mosse del turno precedente
                            for(int i=num_nellordine;i<n_partecipanti;i++){
                                Statement ultim= myconObj.createStatement();
                                ResultSet ultimossas1= ultim.executeQuery("Select turno From Mossa Where IDPartita1="+IDPartita+"and Pedina='"+array[i]+"' and Turno="+(Turnonuovamossa-1)+"and sezione=0");
                                if(!ultimossas1.next()){
                                    ordinerisp=ordinerisp+1;
                                    JOptionPane.showMessageDialog(this,"Ordine non rispettato, tocca a qualcun altro");
                                    X=1;
                                }
                                ultim.close();
                            }
                            //controllo che per le pedine di ordine inferiore hanno giocato il turno della mossa attuale 
                            if(X==0){
                                for(int i=0;i<num_nellordine;i++){
                                    Statement ultim= myconObj.createStatement();
                                    ResultSet ultimossas1= ultim.executeQuery("Select turno From Mossa Where IDPartita1="+IDPartita+"and Pedina='"+array[i]+"' and Turno="+Turnonuovamossa+"and sezione=0");
                                    if(!ultimossas1.next()){
                                        ordinerisp=ordinerisp+1;
                                        JOptionPane.showMessageDialog(this,"Ordine non rispettato, tocca a qualcun altro");
                                    }
                                    ultim.close();
                                }
                            }    
                        }else{
                            if(num_nellordine==3){
                                //controllo che per le pedine di ordine maggiore di num_nellordine hanno giocato le mosse del turno precedente
                                for(int i=num_nellordine;i<n_partecipanti;i++){
                                    Statement ultim= myconObj.createStatement();
                                    ResultSet ultimossas1= ultim.executeQuery("Select turno From Mossa Where IDPartita1="+IDPartita+"and Pedina='"+array[i]+"' and Turno="+(Turnonuovamossa-1)+"and sezione=0");
                                    if(!ultimossas1.next()){
                                        ordinerisp=ordinerisp+1;
                                        JOptionPane.showMessageDialog(this,"Ordine non rispettato, tocca a qualcun altro");
                                        X=0;
                                    }
                                    ultim.close();
                                }
                                //controllo che per le pedine di ordine inferiore hanno giocato il turno della mossa attuale 
                                if(X==0){
                                    for(int i=0;i<num_nellordine;i++){
                                        Statement ultim= myconObj.createStatement();
                                        ResultSet ultimossas1= ultim.executeQuery("Select turno From Mossa Where IDPartita1="+IDPartita+"and Pedina='"+array[i]+"' and Turno="+Turnonuovamossa+"and sezione=0");
                                        if(!ultimossas1.next()){
                                            ordinerisp=ordinerisp+1;
                                            JOptionPane.showMessageDialog(this,"Ordine non rispettato, tocca a qualcun altro");
                                        }
                                        ultim.close();
                                    }
                                }
                            }else{
                                if(num_nellordine==4){
                                    //controllo che per le pedine di ordine maggiore di num_nellordine hanno giocato le mosse del turno precedente
                                    for(int i=num_nellordine;i<n_partecipanti;i++){
                                        Statement ultim= myconObj.createStatement();
                                        ResultSet ultimossas1= ultim.executeQuery("Select turno From Mossa Where IDPartita1="+IDPartita+"and Pedina='"+array[i]+"' and Turno="+(Turnonuovamossa-1)+"and sezione=0");
                                        if(!ultimossas1.next()){
                                            ordinerisp=ordinerisp+1;
                                            JOptionPane.showMessageDialog(this,"Ordine non rispettato, tocca a qualcun altro");
                                            X=1;
                                        }
                                        ultim.close();
                                    }
                                    //controllo che per le pedine di ordine inferiore hanno giocato il turno della mossa attuale 
                                    if(X==0){
                                        for(int i=0;i<num_nellordine;i++){
                                            Statement ultim= myconObj.createStatement();
                                            ResultSet ultimossas1= ultim.executeQuery("Select turno From Mossa Where IDPartita1="+IDPartita+"and Pedina='"+array[i]+"' and Turno="+Turnonuovamossa+"and sezione=0");
                                            if(!ultimossas1.next()){
                                                ordinerisp=ordinerisp+1;
                                                JOptionPane.showMessageDialog(this,"Ordine non rispettato, tocca a qualcun altro");
                                            }
                                            ultim.close();
                                        }
                                    }    
                                }else{
                                    if(num_nellordine==5){
                                        //controllo che per le pedine di ordine inferiore hanno giocato il turno della mossa attuale 
                                        for(int i=0;i<num_nellordine;i++){
                                            Statement ultim= myconObj.createStatement();
                                            ResultSet ultimossas1= ultim.executeQuery("Select turno From Mossa Where IDPartita1="+IDPartita+"and Pedina='"+array[i]+"' and Turno="+Turnonuovamossa+"and sezione=0");
                                            if(!ultimossas1.next()){
                                                ordinerisp=ordinerisp+1;
                                                JOptionPane.showMessageDialog(this,"Ordine non rispettato, tocca a qualcun altro");
                                                
                                            }
                                            ultim.close();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                myconObj.close();
            }catch(SQLException e){e.printStackTrace();}
            
            //Se ordinerisp è diverso da zero significa che l' ordine non è stato rispettato e quindi non si procede con i seguenti controlli
            if(ordinerisp!=0){
                SpostamentoButton.setSelected(false);
                AcquistoButton.setSelected(false);
                SpecialeButton.setSelected(false);
                return;
            }
            if(SpostamentoButton.isSelected()){
                TipoMossa="0";
                try{
                    System.out.println("Stampa insert0");
                    myconObj=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "Utente","12345");
                    Statement state=myconObj.createStatement();
                    ResultSet maxturno = state.executeQuery("select max(turno) as maxturn from logpartecipante where idpartita="+IDPartita+" and pedina='"+PedinaField.getText()+"'");
                    maxturno.next();
                    System.out.println(maxturno.getInt("maxturn"));
                    int m=maxturno.getInt("maxturn");
                    Statement lastlogstat=myconObj.createStatement();
                    ResultSet lastlog = lastlogstat.executeQuery( "select partecipante.pedina as Pedina,partecipante.username as Username,logpartecipante.posizione as Posizione,logpartecipante.saldo as Saldo,logpartecipante.inprigione as Prigioniero,partecipante.eliminato as Eliminato FROM logpartecipante, partecipante where partecipante.idpartita=logpartecipante.idpartita and logpartecipante.idpartita="+IDPartita+" and logpartecipante.pedina=partecipante.pedina and partecipante.pedina='"+PedinaField.getText()+"' and logpartecipante.turno="+m+"and logpartecipante.ordine in (select max(ordine) from logpartecipante where idpartita="+IDPartita+"and pedina='"+PedinaField.getText()+"' and turno="+m+")");
                    System.out.println("select partecipante.pedina as Pedina,partecipante.username as Username,logpartecipante.posizione as Posizione,logpartecipante.saldo as Saldo,logpartecipante.inprigione as Prigioniero,partecipante.eliminato as Eliminato FROM logpartecipante, partecipante where partecipante.idpartita=logpartecipante.idpartita and logpartecipante.idpartita="+IDPartita+" and logpartecipante.pedina=partecipante.pedina and partecipante.pedina='"+PedinaField.getText()+"' and logpartecipante.turno="+m+"and logpartecipante.ordine in (select max(ordine) from logpartecipante where idpartita="+IDPartita+"and pedina='"+PedinaField.getText()+"' and turno="+m+")");
                    if(lastlog.next())
                        System.out.println("PEDINA: "+lastlog.getString("Pedina"));
                    DaPosizione=lastlog.getInt("Posizione");
                    APosizione=DaPosizione+Dado1+Dado2;
                    
                    System.out.println("La posizione di destinazione è"+APosizione);
                    
                    //mi serve salvare il NomeContratto
                    Statement state1=myconObj.createStatement();
                    ResultSet contratto=state1.executeQuery("SELECT Nome FROM Contratti WHERE IDPartita="+IDPartita+" and Posizione="+APosizione);
                    if(contratto.next()){
                        System.out.println("1234");
                        NomeContratto=contratto.getString("Nome");
                        state1.close();
                        System.out.println("Il contratto:"+NomeContratto);
                        
                        //ultimossa tra tutte le mosse
                        Statement ult= myconObj.createStatement();
                        ResultSet ultimossa= ult.executeQuery("Select * From Mossa Where IDPartita1="+IDPartita);
                        System.out.println("abcd");
                        while(ultimossa.next()){
                            Sezioneultimossa=ultimossa.getInt("Sezione");
                            Pedinaultimossa=ultimossa.getString("Pedina");
                            Turnoultimossa= ultimossa.getInt("Turno");
                        }
                        System.out.println("Tutto app");
                        ult.close();
                        System.out.println("La pedina dell' ultimo mossa:"+Pedinaultimossa);
                        System.out.println("L' ultima mossa della partita ha turno="+Turnoultimossa +",Pedina="+Pedinaultimossa+" e Sezione="+Sezioneultimossa);
                        //ultimossa pedina nostra
                        Statement ulti= myconObj.createStatement();
                        ResultSet ultimossas= ulti.executeQuery("Select * From Mossa Where IDPartita1="+IDPartita+"and Pedina='"+Pedina+"'");
                        System.out.println("abcd");
                        while(ultimossas.next()){
                            Sezioneultimossas=ultimossas.getInt("Sezione");
                            Pedinaultimossas=ultimossas.getString("Pedina");
                            Turnoultimossas= ultimossas.getInt("Turno");
                        }
                        ulti.close();
                        System.out.println("L' ultima mossa della pedina ha turno="+Turnoultimossas +",Pedina="+Pedinaultimossas+" e Sezione="+Sezioneultimossas);
                        if(Pedinaultimossa.equals(Pedina)){
                            Statement comandoVero=myconObj.createStatement();
                            System.out.println("Stampa insert1");
                            String sqlCommand="INSERT INTO MOSSA VALUES ("+DaPosizione+","+APosizione+","+Dado1+","+Dado2+","+Turnoultimossa+",'"+TipoMossa+"','"+NomeContratto+"','"+Pedina+"',"+IDpartita1+",null,null,null,null,"+IDpartita+",null,"+IDpartitaPed+",null,"+ (Sezioneultimossa+1)+")";
                            comandoVero.executeUpdate(sqlCommand);
                        }else{
                            Turnoultimossas=Turnoultimossas+1;
                    
                            Statement comandoVero=myconObj.createStatement();
                            System.out.println("Stampa insert2");
                            String sqlCommand="INSERT INTO MOSSA VALUES ("+DaPosizione+","+APosizione+","+Dado1+","+Dado2+","+Turnoultimossas+",'"+TipoMossa+"','"+NomeContratto+"','"+Pedina+"',"+IDpartita1+",null,null,null,null,"+IDpartita+",null,"+IDpartitaPed+",null,"+ Sezione+")";
                    
                            comandoVero.executeUpdate(sqlCommand);
                        
                            lastlogstat.close();
                            state.close();
                        } 
                        this.dispose();
                    }else{
                        JOptionPane.showMessageDialog(this,"Modificare il tipo mossa...");
                    }
                    myconObj.close();
                }
                catch(SQLException e){
                    e.printStackTrace();
                    mostraErrori(e);
                }
            }else{
                if(AcquistoButton.isSelected()){
                    TipoMossa="1";
                    try{
                        System.out.println("Stampa insert0");
                        myconObj=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "Utente","12345");
                        Statement state=myconObj.createStatement();
                        ResultSet maxturno = state.executeQuery("select max(turno) as maxturn from logpartecipante where idpartita="+IDPartita+" and pedina='"+PedinaField.getText()+"'");
                        maxturno.next();
                        System.out.println(maxturno.getInt("maxturn"));
                        int m=maxturno.getInt("maxturn");
                        Statement lastlogstat=myconObj.createStatement();
                        ResultSet lastlog = lastlogstat.executeQuery( "select partecipante.pedina as Pedina,partecipante.username as Username,logpartecipante.posizione as Posizione,logpartecipante.saldo as Saldo,logpartecipante.inprigione as Prigioniero,partecipante.eliminato as Eliminato FROM logpartecipante, partecipante where partecipante.idpartita=logpartecipante.idpartita and logpartecipante.idpartita="+IDPartita+" and logpartecipante.pedina=partecipante.pedina and partecipante.pedina='"+PedinaField.getText()+"' and logpartecipante.turno="+m+"and logpartecipante.ordine in (select max(ordine) from logpartecipante where idpartita="+IDPartita+"and pedina='"+PedinaField.getText()+"' and turno="+m+")");
                        if(lastlog.next())
                            System.out.println(lastlog.getString("Pedina"));
                        DaPosizione=lastlog.getInt("Posizione");
                        APosizione=DaPosizione+Dado1+Dado2;
                        System.out.println("La posizione di destinazione è"+APosizione);
                        //mi serve salvare il NomeContratto
                        Statement state1=myconObj.createStatement();
                        ResultSet contratto=state1.executeQuery("SELECT Nome FROM Contratti WHERE IDPartita="+IDPartita+" and Posizione="+APosizione);
                        if(contratto.next()){
                            System.out.println("1234");
                            NomeContratto=contratto.getString("Nome");
                            state1.close();
                            System.out.println("Il contratto:"+NomeContratto);
                        
                            //ultimossa tra tutte le mosse
                            Statement ult= myconObj.createStatement();
                            ResultSet ultimossa= ult.executeQuery("Select * From Mossa Where IDPartita1="+IDPartita);
                            System.out.println("abcd");
                            while(ultimossa.next()){
                                Sezioneultimossa=ultimossa.getInt("Sezione");
                                Pedinaultimossa=ultimossa.getString("Pedina");
                                Turnoultimossa= ultimossa.getInt("Turno");
                            }
                            ult.close();
                            System.out.println("La pedina dell' ultimo mossa:"+Pedinaultimossa);
                            System.out.println("L' ultima mossa della partita ha turno="+Turnoultimossa +",Pedina="+Pedinaultimossa+" e Sezione="+Sezioneultimossa);
                            //ultimossa pedina nostra
                            Statement ulti= myconObj.createStatement();
                            ResultSet ultimossas= ulti.executeQuery("Select * From Mossa Where IDPartita1="+IDPartita+"and Pedina='"+Pedina+"'");
                            System.out.println("abcd");
                            System.out.println("tuttok quui");
                            while(ultimossas.next()){
                                Sezioneultimossas=ultimossas.getInt("Sezione");
                                Pedinaultimossas=ultimossas.getString("Pedina");
                                Turnoultimossas= ultimossas.getInt("Turno");
                            }
                            ulti.close();
                            System.out.println("L' ultima mossa della pedina ha turno="+Turnoultimossas +",Pedina="+Pedinaultimossas+" e Sezione="+Sezioneultimossas);
                            if(Pedinaultimossa.equals(Pedina)){
                                Statement comandoVero=myconObj.createStatement();
                                System.out.println("Stampa insert1");
                                String sqlCommand="INSERT INTO MOSSA VALUES ("+DaPosizione+","+APosizione+","+Dado1+","+Dado2+","+Turnoultimossa+",'"+TipoMossa+"',null,'"+Pedina+"',"+IDpartita1+",null,null,null,'"+NomeContratto+"',null,"+IDPartita+","+IDpartitaPed+",null,"+(Sezioneultimossa+1)+")";
                                comandoVero.executeUpdate(sqlCommand);
                            }else{
                                System.out.println("Sono dove devo essere");
                                Turnoultimossas=Turnoultimossas+1;
                    
                                Statement comandoVero=myconObj.createStatement();
                                System.out.println("Stampa insert2");
                                String sqlCommand="INSERT INTO MOSSA VALUES ("+DaPosizione+","+APosizione+","+Dado1+","+Dado2+","+Turnoultimossas+",'"+TipoMossa+"',null,'"+Pedina+"',"+IDpartita1+",null,null,null,'"+NomeContratto+"',null,"+IDPartita+","+IDpartitaPed+",null,"+ Sezione+")";
                    
                                comandoVero.executeUpdate(sqlCommand);
                        
                                lastlogstat.close();
                                state.close();
                            }  
                            this.dispose();
                        }else{
                            JOptionPane.showMessageDialog(this,"Modificare il tipo mossa...");
                        }
                        myconObj.close();
                    }
                    catch(SQLException e){
                        e.printStackTrace();
                        mostraErrori(e);
                    }
                    
                }else{
                    if(SpecialeButton.isSelected()){
                        TipoMossa="2";
                        try{
                            System.out.println("Stampa insert0");
                            myconObj=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "Utente","12345");
                            Statement state=myconObj.createStatement();
                            ResultSet maxturno = state.executeQuery("select max(turno) as maxturn from logpartecipante where idpartita="+IDPartita+" and pedina='"+PedinaField.getText()+"'");
                            maxturno.next();
                            System.out.println(maxturno.getInt("maxturn"));
                            int m=maxturno.getInt("maxturn");
                            Statement lastlogstat=myconObj.createStatement();
                            ResultSet lastlog = lastlogstat.executeQuery( "select partecipante.pedina as Pedina,partecipante.username as Username,logpartecipante.posizione as Posizione,logpartecipante.saldo as Saldo,logpartecipante.inprigione as Prigioniero,partecipante.eliminato as Eliminato FROM logpartecipante, partecipante where partecipante.idpartita=logpartecipante.idpartita and logpartecipante.idpartita="+IDPartita+" and logpartecipante.pedina=partecipante.pedina and partecipante.pedina='"+PedinaField.getText()+"' and logpartecipante.turno="+m+"and logpartecipante.ordine in (select max(ordine) from logpartecipante where idpartita="+IDPartita+"and pedina='"+PedinaField.getText()+"' and turno="+m+")");
                            if(lastlog.next())
                                System.out.println(lastlog.getString("Pedina"));
                            DaPosizione=lastlog.getInt("Posizione");
                            APosizione=DaPosizione+Dado1+Dado2;
                            System.out.println("La posizione di destinazione è"+APosizione);
                            //mi serve salvare il NomeContratto
                            Statement state1=myconObj.createStatement();
                            ResultSet speciale=state1.executeQuery("SELECT TipoSpecial FROM Speciale WHERE IDPartita="+IDPartita+" and Posizione="+APosizione);
                            if(speciale.next()){
                                System.out.println("1234");
                                NomeSpeciale=speciale.getString("TipoSpecial");
                                state1.close();
                                System.out.println("Lo speciale:"+NomeSpeciale);
                        
                                //ultimossa tra tutte le mosse
                                Statement ult= myconObj.createStatement();
                                ResultSet ultimossa= ult.executeQuery("Select * From Mossa Where IDPartita1="+IDPartita);
                                System.out.println("abcd");
                                while(ultimossa.next()){
                                    Sezioneultimossa=ultimossa.getInt("Sezione");
                                    Pedinaultimossa=ultimossa.getString("Pedina");
                                    Turnoultimossa= ultimossa.getInt("Turno");
                                }
                                System.out.println("Tutto app");
                                ult.close();
                                System.out.println("La pedina dell' ultimo mossa:"+Pedinaultimossa);
                                System.out.println("L' ultima mossa della partita ha turno="+Turnoultimossa +",Pedina="+Pedinaultimossa+" e Sezione="+Sezioneultimossa);
                                //ultimossa pedina nostra
                                Statement ulti= myconObj.createStatement();
                                ResultSet ultimossas= ulti.executeQuery("Select * From Mossa Where IDPartita1="+IDPartita+"and Pedina='"+Pedina+"'");
                                System.out.println("abcd");
                                while(ultimossas.next()){
                                    Sezioneultimossas=ultimossas.getInt("Sezione");
                                    Pedinaultimossas=ultimossas.getString("Pedina");
                                    Turnoultimossas= ultimossas.getInt("Turno");
                                }
                                ulti.close();
                                System.out.println("L' ultima mossa della pedina ha turno="+Turnoultimossas +",Pedina="+Pedinaultimossas+" e Sezione="+Sezioneultimossas);
                                //controllo se il tipo mossa consiste nel pescare un cartoncino
                                if(NomeSpeciale.equals("Imprevisti")||NomeSpeciale.equals("Probabilita")){
                                    NumeroCarta =Integer.parseInt(NumeroCartaBox.getSelectedItem().toString());
                                }
                                if(Pedinaultimossa.equals(Pedina)&&NumeroCarta==0){
                                    Statement comandoVero=myconObj.createStatement();
                                    System.out.println("Stampa insert1");
                                        String sqlCommand="INSERT INTO MOSSA VALUES ("+DaPosizione+","+APosizione+","+Dado1+","+Dado2+","+Turnoultimossa+",'"+TipoMossa+"',null,'"+Pedina+"',"+IDpartita1+","+APosizione+","+IDPartita+",null,null,null,null,"+IDpartitaPed+","+IDPartita+","+ (Sezioneultimossa+1)+")";
                                    comandoVero.executeUpdate(sqlCommand);
                                }else{
                                    if(!Pedinaultimossa.equals(Pedina)&&NumeroCarta==0){
                                        System.out.println("Sono dove non devo essere");
                                        Turnoultimossas=Turnoultimossas+1;
                    
                                        Statement comandoVero=myconObj.createStatement();
                                        System.out.println("Stampa insert2");
                                        
                                        String sqlCommand="INSERT INTO MOSSA VALUES ("+DaPosizione+","+APosizione+","+Dado1+","+Dado2+","+Turnoultimossas+",'"+TipoMossa+"',null,'"+Pedina+"',"+IDpartita1+","+APosizione+","+IDPartita+",null,null,null,null,"+IDpartitaPed+",null,"+ Sezione+")";
                    
                                        comandoVero.executeUpdate(sqlCommand);
                        
                                        lastlogstat.close();
                                        state.close();
                                
                                    }else{
                                        Statement desc=myconObj.createStatement();
                                        ResultSet descrizione=desc.executeQuery("SELECT Descrizione FROM Carta WHERE IDPartita="+IDPartita+"and NumeroCarta="+NumeroCarta+"and ImpOProb='"+NomeSpeciale+"'" );
                                        descrizione.next();
                                        DescrizioneCarta=descrizione.getString("Descrizione");
                                        desc.close();
                                        if(Pedinaultimossa.equals(Pedina)&&NumeroCarta!=0){
                                            //c'è stato dado doppio
                                            Statement comandoVero=myconObj.createStatement();
                                            System.out.println("Stampa insert1");
                                            String sqlCommand="INSERT INTO MOSSA VALUES ("+DaPosizione+","+APosizione+","+Dado1+","+Dado2+","+Turnoultimossa+",'"+TipoMossa+"',null,'"+Pedina+"',"+IDpartita1+","+APosizione+","+IDPartita+",'"+DescrizioneCarta+"',null,null,null,"+IDpartitaPed+","+IDPartita+","+ (Sezioneultimossa+1)+")";
                                            comandoVero.executeUpdate(sqlCommand);
                                        }else{
                                            if(!Pedinaultimossa.equals(Pedina)&&NumeroCarta!=0){
                                                System.out.println("Sono dove devo essere");
                                                Turnoultimossas=Turnoultimossas+1;
                    
                                                Statement comandoVero=myconObj.createStatement();
                                                System.out.println("Stampa insert2");
                                                System.out.println(DaPosizione);
                                                System.out.println(APosizione);
                                                System.out.println(Dado1);
                                                System.out.println(Dado2);
                                                System.out.println(Turnoultimossas);
                                                System.out.println(TipoMossa);
                                                System.out.println(Pedina);
                                                System.out.println(IDpartita1);
                                                System.out.println(APosizione);
                                                System.out.println(DescrizioneCarta);
                                                
                                                
                                                String sqlCommand="INSERT INTO MOSSA VALUES ("+DaPosizione+","+APosizione+","+Dado1+","+Dado2+","+Turnoultimossas+",'"+TipoMossa+"',null,'"+Pedina+"',"+IDpartita1+","+APosizione+","+IDPartita+",'"+DescrizioneCarta+"',null,null,null,"+IDpartitaPed+","+IDPartita+","+ Sezione+")";
                    
                                                comandoVero.executeUpdate(sqlCommand);
                        
                                                lastlogstat.close();
                                                state.close();
                                            }
                                        }
                                    }
                                }
                                this.dispose();
                        }else{
                            JOptionPane.showMessageDialog(this,"Modificare il tipo mossa...");
                        }
                        myconObj.close();
                    }
                    catch(SQLException e){
                        e.printStackTrace();
                        mostraErrori(e);
                    }
                    }else{
                        JOptionPane.showMessageDialog(this,"Selezionare il tipo di mossa che si è compiuta");
                    }
                }
            }
        }else{
            if(ordinerisp==0)
                JOptionPane.showMessageDialog(this,"Deve essere almeno una pedina a compiere la mossa");
        }
        
        
    }//GEN-LAST:event_ADDbuttonActionPerformed
    
    /**
    * Mostra una descrizione di un errore in un linguaggio comprensibile per
    * l'utente finale. <br> L'implementazione di DBFrame fa eccezione, essa
    * fornisce un messaggio standard per gli errori non previsti esplicitamente.
    *
    * @param e l'eccezione catturata
    * @param contesto intero che distingue la situazione che ha causato
    * l'errore
    */
   protected void mostraErrori(Exception e, int contesto) {
      String msg;
      msg = "Message= " + e.getMessage() + "\n";

      JOptionPane.showMessageDialog(this, msg, "Errore",
              JOptionPane.ERROR_MESSAGE);
   }

   /**
    * Mostra una descrizione di un errore in un linguaggio comprensibile per
    * l'utente finale. <br> L'implementazione di DBFrame fa eccezione, essa
    * fornisce un messaggio standard per gli errori non previsti esplicitamente.
    *
    * @param e l'eccezione catturata
    */
   protected void mostraErrori(Exception e) {
      mostraErrori(e, 0);
   }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreazioneMossa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreazioneMossa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreazioneMossa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreazioneMossa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CreazioneMossa dialog = new CreazioneMossa(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADDbutton;
    private javax.swing.JButton ANNULbutton;
    private javax.swing.JRadioButton AcquistoButton;
    private javax.swing.JComboBox<String> NumeroCartaBox;
    private javax.swing.JTextField PedinaField;
    private javax.swing.JRadioButton SpecialeButton;
    private javax.swing.JRadioButton SpostamentoButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> dad1;
    private javax.swing.JComboBox<String> dad2;
    private javax.swing.JButton infoNumeriCarte;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel monitoLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
