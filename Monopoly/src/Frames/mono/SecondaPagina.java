package Frames.mono;

import Dialogs.mono.CreazionePartita;
import Dialogs.mono.ConfRequest;
import Dialogs.mono.UpdatePlayer;
import Dialogs.mono.InizializzaPartita;

import java.sql.*;
import net.proteanit.sql.DbUtils;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class SecondaPagina extends javax.swing.JFrame {
    Connection myconObj=null;
    Statement mystatObj=null;
    ResultSet myresObj=null;
    private TerzaPagina page;
    
    public SecondaPagina() {
        initComponents();
        selectionall();
        selectionallpl();
    }
    public int getIDpartita(){
        return Integer.parseInt(IDField.getText());
    }
    
    /**il metodo seguente serve a mostrare nella tabella, tutte le partite registrate nel database*/
    public void selectionall(){
        DefaultTableModel model=(DefaultTableModel)TablePartita.getModel();
        model.setRowCount(0);
        try{
        myconObj=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "Utente","12345");
        mystatObj=myconObj.createStatement();
        myresObj=mystatObj.executeQuery("Select IDPartita, NumeroGiocatori, StartP From Partita order by StartP desc");
        //nella tabella, le partite più recenti staranno in alto 
        while(myresObj.next()){
            model.addRow(new Object[]{myresObj.getInt("IDPartita"),myresObj.getInt("NumeroGiocatori"), myresObj.getObject("StartP")});
        }
        myconObj.close();
        }catch(SQLException e){
            e.printStackTrace();
        }
    }
    public void selectionallpl(){
        DefaultTableModel model=(DefaultTableModel)TableGiocatore.getModel();
        model.setRowCount(0);
        try{
            myconObj=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "Utente","12345");
            mystatObj=myconObj.createStatement();
            myresObj=mystatObj.executeQuery("Select Nome,Cognome,Username,PartiteVinte From Giocatore Order by PartiteVinte,Username");
            //nella tabella, i giocatori più fortunati saranno in alto 
            while(myresObj.next()){
                model.addRow(new Object[]{myresObj.getString("Nome"),myresObj.getString("Cognome"),myresObj.getString("Username"),myresObj.getInt("PartiteVinte")});
            }
            myconObj.close();
        }catch(SQLException e){
            e.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        IntroText2 = new javax.swing.JTextArea();
        IDField = new javax.swing.JTextField();
        IDLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        ContinuaButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablePartita = new javax.swing.JTable();
        delButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        IntroText1 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableGiocatore = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        UsernameField = new javax.swing.JTextField();
        UpdateButton = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home");
        setResizable(false);

        IntroText2.setEditable(false);
        IntroText2.setColumns(20);
        IntroText2.setFont(new java.awt.Font("Lucida Sans", 0, 13)); // NOI18N
        IntroText2.setRows(2);
        IntroText2.setText("Selezionare il giocatore che si desidera eliminare oppure\nmodificare:");
        IntroText2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        IntroText2.setCaretColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(IntroText2);

        IDField.setEditable(false);
        IDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDFieldActionPerformed(evt);
            }
        });

        IDLabel.setText("ID Partita:");

        addButton.setText("+");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        ContinuaButton.setText("Continua!");
        ContinuaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContinuaButtonActionPerformed(evt);
            }
        });

        TablePartita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Partita", "N. Giocatori", "Inizio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablePartita.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        TablePartita.setColumnSelectionAllowed(true);
        TablePartita.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProdMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TablePartita);
        TablePartita.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (TablePartita.getColumnModel().getColumnCount() > 0) {
            TablePartita.getColumnModel().getColumn(0).setResizable(false);
            TablePartita.getColumnModel().getColumn(1).setResizable(false);
            TablePartita.getColumnModel().getColumn(2).setResizable(false);
        }

        delButton.setText("-");
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });

        IntroText1.setEditable(false);
        IntroText1.setColumns(20);
        IntroText1.setFont(new java.awt.Font("Lucida Sans", 0, 13)); // NOI18N
        IntroText1.setRows(2);
        IntroText1.setText("Selezionare la partita che si desidera continuare a registrare\noppure se ne crei un' altra: ");
        IntroText1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        IntroText1.setCaretColor(new java.awt.Color(255, 255, 255));
        jScrollPane4.setViewportView(IntroText1);

        TableGiocatore.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Cognome", "Username", "Partite Vinte"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableGiocatore.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        TableGiocatore.setColumnSelectionAllowed(true);
        TableGiocatore.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RowClicked(evt);
            }
        });
        jScrollPane5.setViewportView(TableGiocatore);
        TableGiocatore.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (TableGiocatore.getColumnModel().getColumnCount() > 0) {
            TableGiocatore.getColumnModel().getColumn(0).setResizable(false);
            TableGiocatore.getColumnModel().getColumn(1).setResizable(false);
            TableGiocatore.getColumnModel().getColumn(2).setResizable(false);
            TableGiocatore.getColumnModel().getColumn(3).setResizable(false);
        }
        TableGiocatore.getAccessibleContext().setAccessibleParent(jScrollPane2);

        jButton2.setText("-");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Username:");

        UsernameField.setEditable(false);
        UsernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsernameFieldActionPerformed(evt);
            }
        });

        UpdateButton.setText("Aggiorna");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 34, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(IDLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(delButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(IDField, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(ContinuaButton)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(UsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(UpdateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(49, 49, 49))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IDLabel)
                    .addComponent(IDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ContinuaButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(delButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel1)
                    .addComponent(UsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(132, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(541, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDFieldActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        CreazionePartita p=new CreazionePartita(this,true);
        p.setVisible(true);
        selectionall();
        selectionallpl();
    }//GEN-LAST:event_addButtonActionPerformed

    private void delButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delButtonActionPerformed
        try{
            myconObj=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "Utente","12345");
            String sqlcommand="Delete from Partita where IDPartita="+IDField.getText();
            Statement mynewstat=myconObj.createStatement();
            mynewstat.executeUpdate(sqlcommand);
            //una volta eseguito il comando, svuotiamo il field 
            IDField.setText("");
        }catch(SQLException e){
            e.printStackTrace();
        }
        selectionall();
        selectionallpl();
    }//GEN-LAST:event_delButtonActionPerformed

    private void tblProdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProdMouseClicked
        DefaultTableModel model=(DefaultTableModel) TablePartita.getModel();
        IDField.setText(model.getValueAt(TablePartita.getSelectedRow(),0).toString());
    }//GEN-LAST:event_tblProdMouseClicked

    private void UsernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsernameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UsernameFieldActionPerformed

    private void RowClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RowClicked
        DefaultTableModel model=(DefaultTableModel) TableGiocatore.getModel();
        UsernameField.setText(model.getValueAt(TableGiocatore.getSelectedRow(),2).toString());
    }//GEN-LAST:event_RowClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Per l' eliminazione di  un giocatore è necessario prima controllare che non vi siano partite ad esso associate...
        if(UsernameField.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(this,"Selezionare uno username su cui si intende operare.");
            
        }else{
            try{
                myconObj=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "Utente","12345");
                mystatObj=myconObj.createStatement();
                myresObj=mystatObj.executeQuery("Select count(IDPartita) as conto1 From partecipante where username='"+UsernameField.getText()+"'");
                while(myresObj.next()){
                    if(myresObj.getInt("conto1")==0){
                        String sqlCommand="delete from Giocatore where Username='"+UsernameField.getText()+"'";
                        Statement mynewStat=myconObj.createStatement();
                        mynewStat.executeUpdate(sqlCommand);
                    }else{
                        JOptionPane.showMessageDialog(this,"Il giocatore selezionato ha giocato delle partite");
                        yesornot();
                    }
                }
            }
            catch(SQLException e){
                e.printStackTrace();
            }
            //aggiorno la tabella dei giocatori successivamente alle possibili modifiche
            selectionallpl();
            //aggiornop anche la tabella delle partite in caso in cui si sia decisop di eseguire un delete a cascata
            selectionall();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        UpdatePlayer l= new UpdatePlayer(this,true);
        l.setVisible(true);
        String surname= l.getnewSurname();
        String name= l.getnewName();
        String sqlCommand="Commit";
        if(surname.equals("")){
            if(name.equals("")){
                //non aggiorniamo nulla
            }else{
                //aggiorno solo name
                sqlCommand="Update Giocatore set Nome='"+name+"' where username='"+UsernameField.getText()+"'";
            }
        }else{
            if(name.equals("")){
                    //aggiorno solo surname
                    sqlCommand="Update Giocatore set Cognome='"+surname+"' where username='"+UsernameField.getText()+"'";
            }else{
                //aggiorno tutto
                sqlCommand="Update Giocatore set Nome='"+ name +"', Cognome='"+surname+"' where username='"+ UsernameField.getText()+"'";}
        }
        try{
            myconObj=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "Utente","12345");
            mystatObj=myconObj.createStatement();
            mystatObj.executeUpdate(sqlCommand);
            myconObj.close();
            }catch(SQLException e){e.printStackTrace();}
            selectionall();
            selectionallpl();
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void ContinuaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContinuaButtonActionPerformed
        DefaultTableModel model=(DefaultTableModel) TablePartita.getModel();
        Boolean m=true; 
        int numplayers= Integer.parseInt(model.getValueAt(TablePartita.getSelectedRow(),1).toString());
        int idpartita= Integer.parseInt(IDField.getText());
        int mossenece=9-numplayers;
        String []array= new String[numplayers];
        
        
        try{
            myconObj=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "Utente","12345");
            Statement ped=myconObj.createStatement();
            System.out.println("Statement sui partecipanti");
            ResultSet pedina=ped.executeQuery("Select Pedina From Partecipante Where IDPartita="+idpartita);
            System.out.println("Prima dell' if.");
            if(pedina.next()){
                System.out.println("Sono nell' if.");
                for(int i=0;i<numplayers;i++){
                    array[i]=pedina.getString("Pedina");
                    pedina.next();
                }
                System.out.println("Uscito dal for.");
            }
            System.out.println("Sono uscito dall' if.");
            Statement conto=myconObj.createStatement();
            System.out.println("Statement su mossa");
            ResultSet contato=conto.executeQuery("SELECT Count(*) as conto FROM Mossa Where IDPartita1="+idpartita+"and turno=0");
            System.out.println("Fatto Statement su mossa;");
            if(contato.next()){
                int mossepres=contato.getInt("conto");
                conto.close();
                if(mossepres!=(mossenece*numplayers)){
                    m=false;
                }
            }
            myconObj.close();
            System.out.println("Ho chiuso la connessione");
        }catch(SQLException e){e.printStackTrace();}
        
        if(IDField.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(this, "Selezionare una partita da continuare.");
        }else{
            if(m){
                System.out.println("La partita è a posto");
                this.page=new TerzaPagina();
                page.setIDPartita(this.getIDpartita());
                page.setPage(this);
                page.setLocationRelativeTo(null);
                page.setVisible(true);        
            }else{
                JOptionPane.showMessageDialog(this, "La partita necessita di essere inizializzata.");
                try{
                    //Se, in precedenza, l' utente non ha terminato correttamente l'inizializzazione della partita, dovrà rifarlo successivamente
                    myconObj=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "Utente","12345");
                    Statement attila1=myconObj.createStatement();
                    System.out.println("Gli attila vanno");
                    //attila1 e attila2 elimina la parte di inizializzazione della partita precedentemente non completata
                    attila1.executeUpdate("DELETE FROM Mossa WHERE IDPartita1="+idpartita);
                    System.out.println("1 attila");
                    attila1.close();
                    Statement attila2=myconObj.createStatement();
                    attila2.executeUpdate("UPDATE Contratti SET Pedina=null, IDPartita1=null,Acquistata=0 WHERE IDPartita="+idpartita);
                    System.out.println("2 attila");
                    attila2.close();
                    System.out.println("Gli attila hanno fatto");
                    myconObj.close();
                    System.out.println("chiudo connessione");
                }catch(SQLException e){e.printStackTrace();}
                //apro un dialog per far inizializzare le pedine 
                for(int j=0;j<numplayers;j++){
                    for(int i=0;i<mossenece;i++){
                        InizializzaPartita p= new InizializzaPartita(this,true);
                        p.setIDPartita(idpartita);
                        p.setNum(i+1);
                        p.setPartecipante(array[j]);
                        p.setLocationRelativeTo(null);
                        p.setVisible(true);
                        if(p.Premuto==1){
                            System.out.println("Hai premuto annulla... ciaooooooo");
                            return;
                        }
                        
                    }
                }
            }
        }
    }//GEN-LAST:event_ContinuaButtonActionPerformed
    /** 
     La procedura che viene chiamata nel caso in cui si sta tentando di cancellare un giocatore a cui sono associate delle
     * partite; verrà richiesto di scegliere tra: 
     *      1) desistere dalla cancellazione del giocatore;
     *      2) procedere con la cancellazione a cascata di tutte le registrazioni del database associate al giocatore
     */
    private void yesornot(){
        ConfRequest l= new ConfRequest(this,true);
        l.setVisible(true);
        if (l.getPremuto() == ConfRequest.PREMUTO_CONFERMA) {
            // !!! assicurandosi di aver impostato ON DELETE CASCADE nella definizione delle tabelle !!!
            String sqlCommand="delete from Giocatore where Username='"+UsernameField.getText()+"'";
            try{
                Statement mynewStat=myconObj.createStatement();
                mynewStat.executeUpdate(sqlCommand);
            }catch(SQLException e){
                e.printStackTrace();
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SecondaPagina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SecondaPagina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SecondaPagina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SecondaPagina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SecondaPagina().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ContinuaButton;
    private javax.swing.JTextField IDField;
    private javax.swing.JLabel IDLabel;
    private javax.swing.JTextArea IntroText1;
    private javax.swing.JTextArea IntroText2;
    private javax.swing.JTable TableGiocatore;
    private javax.swing.JTable TablePartita;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JTextField UsernameField;
    private javax.swing.JButton addButton;
    private javax.swing.JButton delButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
